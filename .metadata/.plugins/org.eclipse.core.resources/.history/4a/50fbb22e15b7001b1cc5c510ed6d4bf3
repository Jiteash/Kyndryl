import java.io.*;
import com.google.cloud.vision.v1.Image;
import com.beust.jcommander.internal.Lists;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.vision.v1.AnnotateImageRequest;
import com.google.cloud.vision.v1.AnnotateImageResponse;
import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;
import com.google.cloud.vision.v1.EntityAnnotation;
import com.google.cloud.vision.v1.Feature;
import com.google.cloud.vision.v1.Feature.Type;
import com.google.cloud.vision.v1.ImageAnnotatorClient;
import com.google.cloud.vision.v1p3beta1.Page;
import com.google.protobuf.ByteString;
import com.google.api.services.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import com.google.cloud.storage.Bucket;
import com.google.api.gax.paging;
import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import org.apache.http.NameValuePair;
import java.util.List;
import org.testng.annotations.*;
public class VisionAPIMod {

	static <Bucket> void authExplicit(String jsonPath) throws IOException {
		  // You can specify a credential file by providing a path to GoogleCredentials.
		  // Otherwise credentials are read from the GOOGLE_APPLICATION_CREDENTIALS environment variable.
		  GoogleCredentials credentials = GoogleCredentials.fromStream(new FileInputStream("C:/Users/LENOVO/Downloads/VisionToken/1.json"))
		        .createScoped(Lists.newArrayList("https://www.googleapis.com/auth/cloud-platform"));
		  com.google.cloud.storage.Storage storage = StorageOptions.newBuilder().setCredentials(credentials).build().getService();
		  
		  System.out.println("Buckets:");
		  Page<Bucket> buckets = storage.list();
		  for (Bucket bucket : buckets.iterateAll()) {
		    System.out.println(bucket.toString());

		  }
		}
	
	
	public static void main(String... args) throws Exception {
		
		
		
		 // The path to the image file to annotate
	try(ImageAnnotatorClient vision= ImageAnnotatorClient.create()){
		String fileName = "C:/Users/LENOVO/Downloads/Techie doc/image.png";
		
		 // Reads the image file into memory
		Path path= Paths.get(fileName);
		byte[] data = Files.readAllBytes(path);
	    ByteString imgBytes = ByteString.copyFrom(data);
	    
	    // Builds the image annotation request
	      List<AnnotateImageRequest> requests = new ArrayList<>();
	      Image img = Image.newBuilder().setContent(imgBytes).build();
	      Feature feat = Feature.newBuilder().setType(Type.LABEL_DETECTION).build();
	      AnnotateImageRequest request =
	          AnnotateImageRequest.newBuilder().addFeatures(feat).setImage(img).build();
	      requests.add(request);
	      
	      // Performs label detection on the image file
	      BatchAnnotateImagesResponse response = vision.batchAnnotateImages(requests);
	      List<AnnotateImageResponse> responses = response.getResponsesList();

	      for (AnnotateImageResponse res : responses) {
	        if (res.hasError()) {
	          System.out.format("Error: %s%n", res.getError().getMessage());
	          return;
	        }

	        for (EntityAnnotation annotation : res.getLabelAnnotationsList()) {
	          annotation
	              .getAllFields()
	              .forEach((k, v) -> System.out.format("%s : %s%n", k, v.toString()));
	        }
	      }
	}
	
}
	}
